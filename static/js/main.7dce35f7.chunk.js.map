{"version":3,"sources":["panels/Home.js","panels/ChooseGroup.js","App.js","sw.js","index.js","img/nwtt_full.svg"],"names":["Home","props","react_default","a","createElement","es6","id","theme","state","src","logo_full","alt","className","top","placeholder","onClick","actions","go","group","ChooseGroup","updateState","asideContent","done_default","fill","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","panel","setState","activePanel","panels_Home","panels_ChooseGroup","React","Component","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","isLocalhost","Boolean","window","location","hostname","match","connect","send","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","ReactDOM","render","src_App","document","getElementById","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.7dce35f7.chunk.js","sourcesContent":["import React from 'react';\r\nimport {FormLayout, Panel, PanelHeader, SelectMimicry} from '@vkontakte/vkui';\r\nimport logo_full from '../img/nwtt_full.svg';\r\nimport '../main.css';\r\n\r\nconst Home = props => (\r\n    <Panel id={props.id} theme={props.state.theme}>\r\n        <PanelHeader>NeoWave Timetable</PanelHeader>\r\n        <img src={logo_full} alt=\"Logo\" className=\"logo\"/>\r\n\r\n        <FormLayout>\r\n            <SelectMimicry\r\n                top=\"Выберите свой класс\"\r\n                placeholder=\"Не выбран\"\r\n                onClick={() => props.actions.go('ChooseGroup')}\r\n            >{props.state.group}</SelectMimicry>\r\n        </FormLayout>\r\n    </Panel>\r\n);\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport {Cell, Group, List, Panel, PanelHeader} from '@vkontakte/vkui';\r\nimport Icon24Done from '@vkontakte/icons/dist/24/done';\r\nimport '../main.css';\r\n\r\nconst ChooseGroup = props => (\r\n    <Panel id={props.id} theme={props.state.theme}>\r\n        <PanelHeader>NeoWave Timetable</PanelHeader>\r\n        <Group>\r\n            <List>\r\n                <Cell\r\n                    onClick={() => {\r\n                        props.actions.updateState({group: '1'});\r\n                        props.actions.go('home')\r\n                    }}\r\n                    asideContent={props.state.group === '1' ? <Icon24Done fill=\"var(--accent)\"/> : null}\r\n                >\r\n                    1\r\n                </Cell>\r\n                <Cell\r\n                    onClick={() => {\r\n                        props.actions.updateState({group: '2'});\r\n                        props.actions.go('home')\r\n                    }}\r\n                    asideContent={props.state.group === '2' ? <Icon24Done fill=\"var(--accent)\"/> : null}\r\n                >\r\n                    2\r\n                </Cell>\r\n                <Cell\r\n                    onClick={() => {\r\n                        props.actions.updateState({group: '3'});\r\n                        props.actions.go('home')\r\n                    }}\r\n                    asideContent={props.state.group === '3' ? <Icon24Done fill=\"var(--accent)\"/> : null}\r\n                >\r\n                    3\r\n                </Cell>\r\n            </List>\r\n        </Group>\r\n    </Panel>\r\n);\r\n\r\nexport default ChooseGroup;\r\n","import React from 'react';\r\nimport {View} from '@vkontakte/vkui';\r\nimport '@vkontakte/vkui/dist/vkui.css';\r\n\r\nimport Home from './panels/Home';\r\nimport ChooseGroup from './panels/ChooseGroup';\r\n\r\nclass App extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activePanel: 'home',\r\n            group: '',\r\n            theme: 'white',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        /*connect.subscribe((e) => {\r\n            switch (e.detail.type) {\r\n                case 'VKWebAppGetUserInfoResult':\r\n                    this.setState({fetchedUser: e.detail.data});\r\n                    break;\r\n                default:\r\n                    console.log(e.detail.type);\r\n            }\r\n        });\r\n        connect.send('VKWebAppGetUserInfo', {});*/\r\n    }\r\n\r\n    actions = {\r\n        go: (panel) => {\r\n            this.setState({activePanel: panel});\r\n        },\r\n\r\n        updateState: (state) => {\r\n            this.setState(state);\r\n        }\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <View activePanel={this.state.activePanel}>\r\n                <Home id=\"home\" state={this.state} actions={this.actions}/>\r\n                <ChooseGroup id=\"ChooseGroup\" state={this.state} actions={this.actions}/>\r\n            </View>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nfunction registerValidSW(swUrl) {\r\n\tnavigator.serviceWorker\r\n\t\t.register(swUrl)\r\n\t\t.then((registration) => {\r\n\t\t\tregistration.onupdatefound = () => {\r\n\t\t\t\tconst installingWorker = registration.installing;\r\n\t\t\t\tinstallingWorker.onstatechange = () => {\r\n\t\t\t\t\tif (installingWorker.state === 'installed') {\r\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\r\n\t\t\t\t\t\t\t// At this point, the old content will have been purged and\r\n\t\t\t\t\t\t\t// the fresh content will have been added to the cache.\r\n\t\t\t\t\t\t\t// It's the perfect time to display a \"New content is\r\n\t\t\t\t\t\t\t// available; please refresh.\" message in your web app.\r\n\t\t\t\t\t\t\tconsole.log('New content is available; please refresh.');\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// At this point, everything has been precached.\r\n\t\t\t\t\t\t\t// It's the perfect time to display a\r\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\r\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t};\r\n\t\t})\r\n\t\t.catch((error) => {\r\n\t\t\tconsole.error('Error during service worker registration:', error);\r\n\t\t});\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n\t// Check if the service worker can be found. If it can't reload the page.\r\n\tfetch(swUrl)\r\n\t\t.then((response) => {\r\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\r\n\t\t\tif (\r\n\t\t\t\tresponse.status === 404 ||\r\n\t\t\t\tresponse.headers.get('content-type').indexOf('javascript') === -1\r\n\t\t\t) {\r\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\r\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\r\n\t\t\t\t\tregistration.unregister().then(() => {\r\n\t\t\t\t\t\twindow.location.reload();\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Service worker found. Proceed as normal.\r\n\t\t\t\tregisterValidSW(swUrl);\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch(() => {\r\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.');\r\n\t\t});\r\n}\r\n\r\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' ||\r\n\t// [::1] is the IPv6 localhost address.\r\n\twindow.location.hostname === '[::1]' ||\r\n\t// 127.0.0.1/8 is considered localhost for IPv4.\r\n\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\r\n\r\nexport default function register() {\r\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n\t\t// The URL constructor is available in all browsers that support SW.\r\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n\t\tif (publicUrl.origin !== window.location.origin) {\r\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\r\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\r\n\t\t\t// serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\twindow.addEventListener('load', () => {\r\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n\t\t\tif (isLocalhost) {\r\n\t\t\t\t// This is running on localhost. Lets check if a service worker still exists or not.\r\n\t\t\t\tcheckValidServiceWorker(swUrl);\r\n\r\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\r\n\t\t\t\t// service worker/PWA documentation.\r\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\r\n\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\r\n\t\t\t\t\t\t'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Is not local host. Just register service worker\r\n\t\t\t\tregisterValidSW(swUrl);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\nexport function unregister() {\r\n\tif ('serviceWorker' in navigator) {\r\n\t\tnavigator.serviceWorker.ready.then((registration) => {\r\n\t\t\tregistration.unregister();\r\n\t\t});\r\n\t}\r\n}\r\n","import 'core-js/features/map';\r\nimport 'core-js/features/set';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport connect from '@vkontakte/vk-connect';\r\nimport App from './App';\r\nimport registerServiceWorker from './sw';\r\n\r\n// Init VK  Mini App\r\nconnect.send('VKWebAppInit', {});\r\n\r\n// Если вы хотите, чтобы ваше веб-приложение работало в оффлайне и загружалось быстрее,\r\n// расскомментируйте строку с registerServiceWorker();\r\n// Но не забывайте, что на данный момент у технологии есть достаточно подводных камней\r\n// Подробнее про сервис воркеры можно почитать тут — https://vk.cc/8MHpmT\r\nregisterServiceWorker();\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n","module.exports = __webpack_public_path__ + \"static/media/nwtt_full.6265858a.svg\";"],"sourceRoot":""}